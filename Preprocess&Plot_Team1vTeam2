{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d4b1345f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pd.options.mode.copy_on_write = True\n",
    "columns_to_use = ['Season', 'W', 'FG', 'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n",
    "starting_year_threshold = 1999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dc40daa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#   Preprocess team data by reading from a file, filtering data from a starting year threshold, \n",
    "#   and converting columns to appropriate data types.\n",
    " \n",
    "#   Parameters:\n",
    "#       data_file (str): Path to the data file.\n",
    "#       columns_to_use (list): List of column names to use from the data file.\n",
    "#       starting_year_threshold (int): Starting year threshold for filtering data.\n",
    "   \n",
    "#   Returns:\n",
    "#       pandas.DataFrame: Preprocessed team data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "52c443e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_team_data(data_file, columns_to_use, starting_year_threshold):\n",
    "\n",
    "    # Read data\n",
    "    team_data = pd.read_csv(data_file, usecols=columns_to_use)\n",
    "    \n",
    "    # Copy data to a new DataFrame\n",
    "    team_data_copy = team_data.copy()\n",
    "    \n",
    "    # Extract starting year\n",
    "    team_data_copy['Starting_Year'] = team_data_copy['Season'].str.split('-').str[0]\n",
    "    \n",
    "    # Convert columns to appropriate data types\n",
    "    for col in columns_to_use[1:]:\n",
    "        team_data_copy[col] = team_data_copy[col].astype(float)\n",
    "    \n",
    "    # Filter data based on starting year threshold\n",
    "    team_data_filtered = team_data_copy[team_data_copy['Starting_Year'].astype(int) >= starting_year_threshold]\n",
    "    \n",
    "    # Drop 'Starting_Year' column\n",
    "    team_data_filtered.drop(columns=['Starting_Year'], inplace=True)\n",
    "    \n",
    "    return team_data_filtered\n",
    "\n",
    "# Define columns to use\n",
    "# columns_to_use = ['Season', 'W', 'FG', 'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n",
    "\n",
    "# Define data file path\n",
    "# data_file = 'Knicks_Per_Game_data.txt'\n",
    "\n",
    "# Define starting year threshold\n",
    "# starting_year_threshold = 2000\n",
    "\n",
    "# Preprocess team data\n",
    "# Knicks_2000_df = preprocess_team_data(data_file, columns_to_use, starting_year_threshold)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7e8c3b39",
   "metadata": {},
   "outputs": [],
   "source": [
    "def team_comparison_chart(team1_name, team2_name, team1_statistic, team2_statistic, team1_data, team2_data, xlabel, ylabel, title):\n",
    "    fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    " \n",
    "    ax1.plot(team1_data['Season'], team1_data[team1_statistic], color='blue', linestyle='--', marker='s', label=f'{team1_name} {team1_statistic}')\n",
    "    ax1.plot(team2_data['Season'], team2_data[team2_statistic], color='red', linestyle='--', marker='o', label=f'{team2_name} {team2_statistic}')\n",
    "    ax1.set_xlabel(xlabel)\n",
    "    ax1.set_ylabel(ylabel, labelpad=20, fontsize='large')\n",
    "    ax1.set_title(title, fontsize='x-large')\n",
    "    ax1.legend(fontsize='x-small')\n",
    "    ax1.spines['top'].set_visible(False)\n",
    "    ax1.spines['right'].set_visible(False)\n",
    "    ax1.spines['left'].set_visible(False)\n",
    "    ax1.tick_params(axis='x', rotation=45)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Example usage:\n",
    "# team_comparison_chart(\"Heat\", \"Hawks\", \"W\", \"W\", Heat_W_Season_df, \n",
    "#                        Hawks_W_Season_df, 'NBA Season', 'Wins', \n",
    "#                       'Hawks V. Heat Win Comparison')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "20f3805e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Pistons_2000_df = preprocess_team_data('Pistons_Per_Game_data.txt', columns_to_use, starting_year_threshold)\n",
    "# Pistons_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "db15d78c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Knicks_2000_df = preprocess_team_data('Knicks_Per_Game_data.txt', columns_to_use, starting_year_threshold)\n",
    "# Knicks_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b2f102b7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "Hawks_2000_df = preprocess_team_data('Hawks_Per_Game_data.txt', columns_to_use, starting_year_threshold)\n",
    "# Hawks_2000_df\n",
    "# There was a space in front of \"Season\" so it showed \" Season\" and could not run through proprocess function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "de6b0864",
   "metadata": {},
   "outputs": [],
   "source": [
    "Heat_2000_df = preprocess_team_data('Heat_Per_Game_data.txt', columns_to_use, starting_year_threshold)\n",
    "# Heat_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b114d155",
   "metadata": {},
   "outputs": [],
   "source": [
    "### PLOTS ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d41418f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks v. Pistons PTS (per game) Comparison\n",
    "# team_comparison_chart(\"Pistons\", \"Knicks\", \"PTS\", \"PTS\", Pistons_2000_df, Knicks_2000_df, \"Season\", \"Points\", \"Pistons V. Knicks\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d9382a0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat v. Pistons Season Wins Comparison\n",
    "# team_comparison_chart(\"Pistons\", \"Heat\", \"W\", \"W\", Pistons_2000_df, Heat_2000_df, \"Season\", \"Wins\", \"Pistons V. Heat\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8a7c2454",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pistons v. Heat PTS (peg game)  Comparison\n",
    "# team_comparison_chart(\"Pistons\", \"Heat\", \"PTS\", \"PTS\", Pistons_2000_df, Heat_2000_df, \"Season\", \"Points\", \"Pistons V. Heat\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0989f01b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "team_comparison_chart(\"Hawks\", \"Knicks\", \"W\", \"W\", Knicks_2000_df, Hawks_2000_df, \"Season\", \"Wins\", \"Knicks V. Hawks Wins\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1aaac7f5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2370d0ad",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f99f661",
   "metadata": {},
   "outputs": [],
   "source": [
    "#######################        NOTES AND OLD CELLS              #####################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbe61cac",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# columns_to_use = ['Season', 'W', 'FG', 'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n",
    "# Heat_All_Seasons_data = pd.read_csv('Miami_Heat_Per_Game_data.txt', usecols=columns_to_use)\n",
    "# Heat_All_Seasons_df = Heat_All_Seasons_data.copy()\n",
    "# Heat_All_Seasons_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "305be552",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for col in columns_to_use[1:]:\n",
    "# Heat_All_Seasons_df[col] = Heat_All_Seasons_df[col].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "399de25e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_All_Seasons_df['Starting_Year'] = Heat_All_Seasons_df['Season'].str.split('-').str[0]\n",
    "\n",
    "# for col in columns_to_use[1:]:\n",
    "# Heat_All_Seasons_df[col] = Heat_All_Seasons_df[col].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c96c000b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(Heat_All_Seasons_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14319755",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_2000_df = Heat_All_Seasons_df[Heat_All_Seasons_df['Starting_Year'].astype(int) >= 2000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1be0cfba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pd.options.mode.copy_on_write = True\n",
    "# Heat_2000_df.drop(columns=['Starting_Year'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1685dc3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Heat_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30d9c386",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_2000_df.to_csv('Heat_Since_2000.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7795d6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_W_Season_df = Heat_2000_df.loc[:, ['Season', 'W']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf1ec0c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_W_Season_df.to_csv('Heat_W_Season_Since_2000.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9f10a0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_W_Season_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830b47c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_PTS_Season_df = Heat_2000_df.loc[:, ['Season', 'PTS']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3a2244e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_PTS_Season_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed07f0fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Heat_PTS_Season_df.to_csv('Heat_PTS_Season_Since_2000.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "331c36eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# columns_to_use = ['Season', 'W', 'FG', 'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n",
    "# Hawks_All_Seasons_data = pd.read_csv('Atlanta_Hawks_Per_Game_data.txt', usecols=columns_to_use)\n",
    "# Hawks_All_Seasons_df = Hawks_All_Seasons_data.copy()\n",
    "# Hawks_All_Seasons_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54f883ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for col in columns_to_use[1:]:\n",
    "#     Hawks_All_Seasons_df[col] = Hawks_All_Seasons_df[col].astype(float)\n",
    "    \n",
    "# Hawks_All_Seasons_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02a987d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hawks_W_Season_df = Hawks_All_Seasons_df.loc[:, ['Season', 'W']]\n",
    "# Hawks_W_Season_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb7883be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# columns_to_use = ['Season', 'W', 'FG', 'FGA', 'FG%', '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n",
    "# Knicks_All_Seasons_data = pd.read_csv('Knicks_Per_Game_data.txt', usecols=columns_to_use)\n",
    "# Knicks_All_Seasons_df = Knicks_All_Seasons_data.copy()\n",
    "# Knicks_All_Seasons_df\n",
    "# \n",
    "# Knicks_All_Seasons_df['Starting_Year'] = Knicks_All_Seasons_df['Season'].str.split('-').str[0]\n",
    "# \n",
    "# for col in columns_to_use[1:]:\n",
    "#     Knicks_All_Seasons_df[col] = Knicks_All_Seasons_df[col].astype(float)\n",
    "# \n",
    "# Knicks_2000_df = Knicks_All_Seasons_df[Knicks_All_Seasons_df['Starting_Year'].astype(int) >= 2000]\n",
    "# \n",
    "# pd.options.mode.copy_on_write = True\n",
    "# Knicks_2000_df.drop(columns=['Starting_Year'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ccec403",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bb2f021",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # BAR CHART TO COMPARE Heat V. Hawks Wins\n",
    "# \n",
    "# # Determine the length of the shortest DataFrame\n",
    "# min_length = min(len(Heat_W_Season_df['Season']), len(Hawks_W_Season_df['Season']))\n",
    "# \n",
    "# # Define the x-axis locations for each set of \n",
    "# bar_width = 0.5\n",
    "# x1 = np.arange(min_length)  # X positions for Heat\n",
    "# x2 = x1 + bar_width  # Shift the x-axis for the second set of bars \n",
    "# \n",
    "# # Plotting\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# \n",
    "# # Plot data from Heat_PTS_df\n",
    "# plt.bar(x1, Heat_W_Season_df['W'][:min_length], width=bar_width, color='red', label='Heat Wins')\n",
    "# \n",
    "# # Plot data from Knicks_PTS_df\n",
    "# plt.bar(x2, Hawks_W_Season_df['W'][:min_length], width=bar_width, color='yellow', label='Hawks Wins', alpha=0.5)\n",
    "# \n",
    "# # Customize the plot\n",
    "# plt.title('Miami Heat vs. Atlanta Hawks Season Wins')\n",
    "# plt.xlabel('Season')\n",
    "# plt.ylabel('Points Per Game')\n",
    "# plt.xticks(ticks=(x1 + x2) / 2, labels=Heat_W_Season_df['Season'][:min_length], rotation=45)  # Set x-axis ticks and labels\n",
    "# plt.legend()\n",
    "# \n",
    "# # Show plot\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "537c4df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # BAR LINES CHART\n",
    "# \n",
    "# # SHOWCASES KNICKS WINS V. THEIR PLAYERS SALARIES V.NBA SALARY CAP V. 41 WINS (.500 record)\n",
    "# \n",
    "# fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "# \n",
    "# # Bar chart for Wins\n",
    "# # ax1.bar(W_Season_df['Season'], W_Season_df['W'], color='darkblue', alpha=0.7, label='Knicks Season Wins')\n",
    "# \n",
    "# # Line chart Heat Wins\n",
    "# ax1.plot(Heat_W_Season_df['Season'], Heat_W_Season_df['W'], color='red', linestyle='--', marker='''s''', label='Heat Season Wins')\n",
    "# # Line chart Hawks Wins\n",
    "# ax1.plot(Hawks_W_Season_df['Season'], Hawks_W_Season_df['W'], color='yellow', linestyle='--', marker='o', label='Hawks Wins')\n",
    "# \n",
    "# # ax1.twinx()\n",
    "# # ax2.bar(Heat_df['Season'], Heat_df['W'], color='green', alpha=0.65, label='Wins (Heat_df)')\n",
    "# \n",
    "# # Set up a secondary y-axis for the line plot\n",
    "# # ax2 = ax1.twinx()\n",
    "# \n",
    "# # Line Chart Payroll\n",
    "# # ax2.plot(Payroll_df['Season'], Payroll_df['Payroll']/10000000, color='green', linestyle='-', marker='o', label='Payroll (in $Millions)')\n",
    "# \n",
    "# # Salary Cap\n",
    "# # ax2.plot(All_Seasons_WSC_Lined_Up_df['NBA_SC']/10000000, color='red', linestyle='', marker='x', label='NBA_Salary_Cap (in $Millions)')\n",
    "# \n",
    "# # 41 Wins\n",
    "# # ax1.plot(W_Season_df['Season'], [41] * len(W_Season_df), marker=\"<\", markersize=5, linestyle='', color='orange', label='41 Wins (.500 Record)')\n",
    "# ax1.axhline(y=41, color='orange', linestyle='--', linewidth=1, label='41 Wins (.500 Record)')\n",
    "# \n",
    "# # Set labels and title\n",
    "# \n",
    "# # X-axis label\n",
    "# # ax1.set_xlabel()\n",
    "# ax1.set_xlabel('NBA Season')\n",
    "# \n",
    "# # Y-axis abel\n",
    "# # ax1.set_ylabel()\n",
    "# ax1.set_ylabel('Wins', labelpad = 20, fontsize = 'large')\n",
    "# \n",
    "# # When you have 2 Y-axis labels, this is the 2nd one\n",
    "# # ax2.set_ylabel()\n",
    "# # ax2.set_ylabel('Dollars (in $millions)(lines)', labelpad = 20, fontsize = 'large')\n",
    "# \n",
    "# # Title\n",
    "# # ax1.set_title()\n",
    "# ax1.set_title('Hawks V. Heat Win Comparison', fontsize = 'x-large')\n",
    "# \n",
    "# # Add legend\n",
    "# # ax1.legend()\n",
    "# # lines1, labels1 = ax1.get_legend_handles_labels()\n",
    "# # lines2, labels2 = ax2.get_legend_handles_labels()\n",
    "# ax1.legend(fontsize = 'x-small')\n",
    "# \n",
    "# # Move legend 1 inch to the left\n",
    "# # plt.subplots_adjust()\n",
    "# # plt.subplots_adjust(right=0.8)\n",
    "# \n",
    "# # Adjusting the legend positioning\n",
    "# # legend = ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right', fontsize = 'x-small')\n",
    "# # legend.set_bbox_to_anchor((1 - 0.1, 1))  # Adjust 0.1 for 1 inch\n",
    "# \n",
    "# # Remove Spines\n",
    "# ax1.spines['top'].set_visible(False)\n",
    "# ax1.spines['right'].set_visible(False)\n",
    "# ax1.spines['left'].set_visible(False)\n",
    "# \n",
    "# # Rotate x-axis labels\n",
    "# ax1.tick_params(axis='x', rotation=45)\n",
    "# \n",
    "# # Grid before switching back to bar charts\n",
    "# # ax1.grid(axis='x')\n",
    "# \n",
    "# # Show plot\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c355e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # BAR LINES CHART\n",
    "# \n",
    "# # SHOWCASES KNICKS WINS V. THEIR PLAYERS SALARIES V.NBA SALARY CAP V. 41 WINS (.500 record)\n",
    "# \n",
    "# fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "# \n",
    "# # Line chart Heat Wins\n",
    "# ax1.plot(Heat_W_Season_df['Season'], Heat_W_Season_df['W'], color='red', linestyle='--', marker='s', label='Heat Season Wins')\n",
    "# # Line chart Hawks Wins\n",
    "# ax1.plot(Hawks_W_Season_df['Season'], Hawks_W_Season_df['W'], color='yellow', linestyle='--', marker='o', label='Hawks Wins')\n",
    "# \n",
    "# # 41 Wins\n",
    "# ax1.axhline(y=41, color='orange', linestyle='--', linewidth=1, label='41 Wins (.500 Record)')\n",
    "# \n",
    "# # Set labels and title\n",
    "# \n",
    "# # X-axis label\n",
    "# ax1.set_xlabel('NBA Season')\n",
    "# \n",
    "# # Y-axis label\n",
    "# ax1.set_ylabel('Wins', labelpad=20, fontsize='large')\n",
    "# \n",
    "# # Title\n",
    "# ax1.set_title('Hawks V. Heat Win Comparison', fontsize='x-large')\n",
    "# \n",
    "# # Add legend\n",
    "# ax1.legend(fontsize='x-small')\n",
    "# \n",
    "# # Remove Spines\n",
    "# ax1.spines['top'].set_visible(False)\n",
    "# ax1.spines['right'].set_visible(False)\n",
    "# ax1.spines['left'].set_visible(False)\n",
    "# \n",
    "# # Rotate x-axis labels\n",
    "# ax1.tick_params(axis='x', rotation=45)\n",
    "# \n",
    "# # Show plot\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e350dba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_All_Seasons_df['Starting_Year'] = Knicks_All_Seasons_df['Season'].str.split('-').str[0]\n",
    "\n",
    "# for col in columns_to_use[1:]:\n",
    "    # Knicks_All_Seasons_df[col] = Knicks_All_Seasons_df[col].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507e828e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_All_Seasons_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "778ad662",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_2000_df = Knicks_All_Seasons_df[Knicks_All_Seasons_df['Starting_Year'].astype(int) >= 2000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "675821f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fec6d5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Knicks_2000_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cb7b6c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# team_comparison_chart(\"Knicks\", \"Hawks\", \"W\", \"W\", Knicks_All_Seasons_df, Hawks_W_Season_df, 'NBA Season', 'Wins','Hawks V. Hawks Win Comparison')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90d159f9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
